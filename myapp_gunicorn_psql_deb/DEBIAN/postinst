#!/bin/bash
# Полный скрипт установки MyApp с PostgreSQL и CRL Daemon с индикатором прогресса

# Функция для отображения прогресс-бара внизу экрана
progress_bar() {
    local current=$1
    local total=$2
    local width=50
    local percent=$((current * 100 / total))
    local progress=$((current * width / total))

    # Сохраняем позицию курсора
    tput sc

    # Перемещаем курсор вниз экрана
    tput cup $(tput lines) 0

    # Создаем строку прогресса
    local bar="MyApp:["
    for ((i=0; i<width; i++)); do
        if [ $i -lt $progress ]; then
            bar+="#"
        else
            bar+="."
        fi
    done
    bar+="] $percent%"

    # Выводим прогресс-бар и очищаем остаток строки
    echo -ne "$bar$(tput el)"

    # Восстанавливаем позицию курсора
    tput rc
}

# Очищаем последнюю строку перед началом
tput sc
tput cup $(tput lines) 0
echo -ne "$(tput el)"
tput rc

# Общее количество шагов (для прогресс-бара)
TOTAL_STEPS=24
CURRENT_STEP=0

# 0. Установка системных зависимостей
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo "=== Установка системных зависимостей ==="
apt-get update -q
DEBIAN_FRONTEND=noninteractive apt-get install -yq \
    nginx \
    python3-pip \
    python3-venv \
    python3-psycopg2 \
    postgresql \
    postgresql-client \
    postgresql-contrib \
    libpq-dev \
    gunicorn \
    python3-sqlalchemy \
    firewalld \
    python3-dev \
    python3-psutil \
    python3-pyasn1\
    keepassxc > /dev/null

# 0.1. Запрос пути и копирование файлов библиотеки bicry
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Настройка библиотек BICRY ==="
while true; do
    read -p "Введите полный путь до папки с файлами библиотеки BICRY: " bicry_path
    if [ -d "$bicry_path" ]; then
        # Проверка наличия необходимых файлов
        if [ -f "$bicry_path/bcry.h" ] && [ -f "$bicry_path/errors.h" ] && \
           [ -f "$bicry_path/Linux/libbicr5_64.so" ] && [ -f "$bicry_path/Linux/libbiogrn.so" ]; then

            # Создание целевых директорий
            mkdir -p /opt/myapp/app/bicry
            echo "Копирование файлов библиотеки..."

            # Копирование заголовочных файлов
            cp "$bicry_path/bcry.h" "$bicry_path/errors.h" /opt/myapp/app/bicry/

            # Копирование библиотек
            cp "$bicry_path/Linux/libbicr5_64.so" "$bicry_path/Linux/libbiogrn.so" /opt/myapp/app/bicry/

            sudo cp "$bicry_path/Linux/libbicr5_64.so" "$bicry_path/Linux/libbiogrn.so" /usr/lib/
            sudo ldconfig

            # Компиляция библиотеки
            progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
            echo -e "\nКомпиляция библиотеки libbicry_openkey.so..."
            cd /opt/myapp/app/bicry
            export LD_LIBRARY_PATH=/opt/myapp/app/bicry:$LD_LIBRARY_PATH
            if [ -f "bicr_func.c" ]; then
                # 1. Сборка библиотеки
                gcc -shared -fPIC -o libbicry_openkey.so bicr_func.c -L. -lbicr5_64 -lbiogrn

                # 2. Копирование библиотеки в /usr/lib/your_app/
                sudo cp libbicry_openkey.so /usr/lib/
                sudo ldconfig

                if [ $? -eq 0 ]; then
                    echo "✓ Библиотека успешно скомпилирована"
                else
                    echo "⚠️ Ошибка при компиляции библиотеки!"
                fi
            fi
            break
        else
            echo "⚠️ В указанной папке отсутствуют необходимые файлы (bcry.h, errors.h, libbicr5_64.so, libbiogrn.so)!"
        fi
    else
        echo "⚠️ Указанная папка не существует или недоступна!"
    fi

    read -p "Повторить ввод пути? (y/n) " choice
    case "$choice" in
        [nN]|[nN][oO]) exit 1 ;;
        *) ;;
    esac
done

# 1. Проверка и создание необходимых директорий
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Настройка файловой структуры ==="
mkdir -p /opt/myapp/{venv,app,logs}
mkdir -p /var/log/myapp/
mkdir -p /var/lib/myapp/
chown -R www-data:www-data /opt/myapp /var/log/myapp /var/lib/myapp
chmod 755 /var/log/myapp
chmod 755 /opt/myapp
chmod 755 /var/lib/myapp
chmod 644 /var/log/myapp/*.log 2>/dev/null || true

# 2. Настройка Python окружения
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Настройка Python окружения ==="
python3 -m venv /opt/myapp/venv
source /opt/myapp/venv/bin/activate
pip install -U pip wheel >/dev/null
pip install gunicorn flask psycopg2-binary >/dev/null
pip install asn1
pip install pyasn1_modules
pip install sqlalchemy

# Установка дополнительных зависимостей, если есть requirements.txt
if [ -f "/opt/myapp/app/requirements.txt" ]; then
    pip install -r /opt/myapp/app/requirements.txt >/dev/null
fi
deactivate

# 3. Настройка PostgreSQL
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\nНастройка PostgreSQL..."
echo "Введите параметры подключения к БД:"

# Функция для проверки существования БД
check_db_exists() {
    sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$1"
}

# Запрос параметров с значениями по умолчанию
read -p "Имя пользователя PostgreSQL: " db_user
db_user=${db_user:-myapp_user}

read -s -p "Пароль пользователя PostgreSQL: " db_pass
echo

# Запрос имени БД с проверкой существования
while true; do
    read -p "Имя базы данных: " db_name
    db_name=${db_name:-flower_db}

    if check_db_exists "$db_name"; then
        echo "Ошибка: База данных '$db_name' уже существует!" >&2
        read -p "Хотите ввести другое имя? (y/n) " choice
        case "$choice" in
            [yY]|[yY][eE][sS]) continue ;;
            *) echo "Отмена операции"; exit 1 ;;
        esac
    else
        break
    fi
done
db_name=${db_name:-flower_db}

# Создание пользователя и БД с проверкой существования
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
sudo -u postgres psql -c "DO \$$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$db_user') THEN
        CREATE ROLE $db_user WITH LOGIN PASSWORD '$db_pass';
        RAISE NOTICE 'Пользователь $db_user создан';
    ELSE
        ALTER ROLE $db_user WITH PASSWORD '$db_pass';
        RAISE NOTICE 'Пароль пользователя $db_user обновлён';
    END IF;
END
\$$;"

# Создание БД, если не существует
if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
    sudo -u postgres psql -c "CREATE DATABASE $db_name OWNER $db_user;"
else
    echo "База данных $db_name уже существует, пропускаем создание"
fi

# 4. Создание конфигурационного файла БД
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\nСоздание конфигурации БД..."
mkdir -p /etc/myapp
DB_CONFIG="/etc/myapp/db.env"

cat > "$DB_CONFIG" <<EOL
[postgresql]
DB_HOST=localhost
DB_PORT=5432
DB_NAME=$db_name
DB_USER=$db_user
DB_PASS=$db_pass
EOL

cat <<EOF >> "$DB_CONFIG"
[app]
UPLOAD_FOLDER=uploads
CREATED_FILES_FOLDER=created_files
ROOT_CERT_FOLDER=root_certs
CERTSASN1=CertsAsn1
ROOT_CERT_TO_SEND=rootcertbytestosend
PRIV_KEY_TO_SEND=privatekeybytestosend
PWD_TO_SEND=passwordtosend
APP_LOG_DIR=/var/log/myapp
APP_LOG_FILE=/var/log/myapp/app.log
FILENAME_SELF_SIGNED=root_certificate.der
FILENAME_PRIVATE_KEY=private.key
FILENAME_CERTIFICATE_P10=certificate.der
FILENAME_CRL=crl.der
ROOT_CERT_DAEMON=root_cert_daemon
EOF

# Настройка прав доступа к конфигу
chown www-data:www-data "$DB_CONFIG"
chmod 644 "$DB_CONFIG"

# 5. Настройка прав доступа к БД
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $db_name TO $db_user;"
sudo -u postgres psql -d $db_name -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $db_user;"
sudo -u postgres psql -d $db_name -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $db_user;"

# 6. Инициализация таблиц БД
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\nИнициализация таблиц БД..."
init_log="/tmp/myapp_db_init.log"
if [ -f "/opt/myapp/app/db/init_db.py" ]; then
    sudo -u www-data /opt/myapp/venv/bin/python /opt/myapp/app/db/init_db.py 2>&1 | tee "$init_log"

    # Проверка успешности создания таблиц
    if sudo -u postgres psql -d $db_name -c "\dt" | grep -q "certificates"; then
        echo "✓ Таблицы успешно созданы"
    else
        echo "✗ Ошибка при создании таблиц!"
        echo "Подробности в логе: $init_log"
    fi
else
    echo "Файл init_db.py не найден, пропускаем инициализацию БД"
fi

# 7. Настройка Nginx
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Настройка Nginx ==="
if [ -f "/etc/nginx/sites-available/myapp.conf" ]; then
    ln -sf /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    nginx -t && systemctl restart nginx
fi

# 8. Настройка firewall
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
if command -v firewall-cmd &>/dev/null; then
    echo -e "\n=== Настройка firewall ==="
    firewall-cmd --permanent --add-service=http
    firewall-cmd --permanent --add-service=https
    firewall-cmd --reload
fi

# 9. Настройка systemd сервисов
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Настройка сервисов ==="

# Основной сервис приложения
cat > /etc/systemd/system/myapp.service <<'EOL'
[Unit]
Description=MyApp Gunicorn Service
After=network.target crl_daemon.service  # Добавлена зависимость

[Service]
User=www-data
Group=www-data
WorkingDirectory=/opt/myapp/app
Environment="PATH=/opt/myapp/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ExecStartPre=/bin/rm -f /opt/myapp/myapp.sock
ExecStart=/bin/sh -c 'rm -f /opt/myapp/myapp.sock && \
    /opt/myapp/venv/bin/gunicorn \
    --workers 1 \
    --bind unix:/opt/myapp/myapp.sock \
    --log-level debug \
    --preload \
    wsgi:app'
Restart=always
RestartSec=3
Environment="PYTHONPATH=/opt/myapp/app"

[Install]
WantedBy=multi-user.target
EOL

# Сервис логгера
cat > /etc/systemd/system/crl_daemon.service <<'EOL'
[Unit]
Description=CRL Daemon Service
After=network.target

[Service]
User=www-data
Group=www-data
WorkingDirectory=/opt/myapp/app
Environment="PATH=/opt/myapp/venv/bin"
ExecStart=/opt/myapp/venv/bin/python3 /opt/myapp/app/crl_daemon.py
Restart=no
RestartSec=10
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=crl_daemon

[Install]
WantedBy=multi-user.target
EOL

# 10. Запуск сервисов
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Запуск сервисов ==="
systemctl daemon-reload
systemctl enable myapp.service
systemctl enable crl_daemon.service

systemctl restart postgresql
systemctl start myapp
sleep 3  # Даем время основному приложению запуститься
systemctl start crl_daemon
systemctl restart nginx

# 11. Проверка установки
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Проверка установки ==="

check_service() {
    local service="$1"
    local status=$(systemctl is-active "$service" 2>&1)

    if [[ "$status" == "active" ]]; then
        echo "✓ $service: успешно запущен и работает"
        return 0
    else
        echo "⚠️ $service: не запущен или ещё не готов (состояние: $status)"
        journalctl -u "$service" -n 10 --no-pager
        return 1
    fi
}

check_service postgresql
check_service myapp
check_service crl_daemon
check_service nginx

# Проверка доступности приложения
progress_bar $((CURRENT_STEP++)) $TOTAL_STEPS
echo -e "\n=== Проверка приложения ==="
if curl -sSf http://localhost >/dev/null 2>&1; then
    echo "✓ Приложение доступно по http://localhost"
else
    echo "⚠️ Не удалось подключиться к приложению"
    exit 1
fi

# Завершаем прогресс-бар
progress_bar $TOTAL_STEPS $TOTAL_STEPS
echo
echo "=== Установка успешно завершена ==="
echo "Данные для подключения к БД:"
echo "============================"
cat "$DB_CONFIG" | sed 's/DB_PASS=.*/DB_PASS=********/'
echo "============================"

# Очищаем прогресс-бар в конце
tput sc
tput cup $(tput lines) 0
echo -ne "$(tput el)"
tput rc
